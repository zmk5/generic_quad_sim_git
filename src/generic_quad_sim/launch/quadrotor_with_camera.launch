<launch>
    <!-- Args for use later -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- To use an empty world, keep the file as is. If you would like a small boundary or testbed, comment
    line 10 and uncomment line 11  -->
        <!--<param name="tf_prefix" value="generic_quad"/>-->
        <!-- URDF XML Generic Quadrotor description loaded onto the parameter server -->
    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find generic_quad_sim)/urdf/quad_final_with_camera_quadrotor_drive.urdf.xacro'"/>
    <!-- Satrt the joint state_publisher -->
    <node name="joint_state_publisher"
          pkg="joint_state_publisher"
          type="joint_state_publisher">
          <param name="publish_frequency" value="50.0" type="double"/>
    </node>
    <!-- Start the robot state publisher -->
    <node name="robot_state_publisher"
          pkg="robot_state_publisher"
          type="robot_state_publisher"
          output="screen">
          <param name="publish_frequency" value="50.0" type="double"/>
    </node>
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner"
          pkg="gazebo_ros"
          type="spawn_model"
          respawn="false"
          output="screen"
          args="-urdf -model generic_quad_sim -param robot_description -robot_namespace generic_quad">
    </node>
</launch>